#!/usr/bin/env python

"""
Basic implementation for messaging service daemon. This daemon is responsible
of fetching messages from the message queue and dispatch them to the concerned
handler according to message `type` field.

"""

import pika
import logging
import json
import gevent

from service import utils, settings


logging.basicConfig(level=logging.ERROR)


QUEUE_NAME = settings.MESSAGE_QUEUE['NAME']
_logger = logging.getLogger("messaging_service")


# Connect to the broker
connection = pika.BlockingConnection(pika.ConnectionParameters(
    host=settings.MESSAGE_QUEUE['HOST']))
channel = connection.channel()

channel.queue_declare(queue=QUEUE_NAME)

# Loading defined handlers in settings.py
handlers = utils.load_handlers()


def callback(ch, method, properties, body):
    print " [x] Received %r" % (body,)
    message = json.loads(body)
    try:
        handler = handlers[message['type']]
    except KeyError:
        if 'type' in message:
            _logger.error(
                "No handler found for `{}` message.".format(message['type']))
        else:
            _logger.error("Bad message `{}`".format(body))
    if hasattr(handler, "filter") and not handler.filter.filter(message):
        return

    def run_handler(handler):
        handler.emit(message)

    thread = gevent.spawn(run_handler, handler)
    # gevent.sleep(0)
    try:
        thread.get()
    except:
        pass


print ' [*] Waiting for messages. To exit press CTRL+C'

try:
    channel.basic_consume(callback, queue=QUEUE_NAME, no_ack=True)
    channel.start_consuming()
except KeyboardInterrupt:
    print "\n* Shutdown messaging service: OK"
